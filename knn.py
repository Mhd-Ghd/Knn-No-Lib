# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CpXU2zD1NznSwqbqM2pjVIRYn5B-VN4d
"""

import pandas as pd 
import numpy as np
import math

"""## **Importing the dataset**"""

data = pd.read_csv("Iris.csv")
dataset = data.iloc[:,1:].values
x= data.iloc[:,1:-1].values
y=data.iloc[:,-1].values

"""##**Label Encoding**"""

EncodedLabels={"Iris-setosa":1,"Iris-versicolor":2,"Iris-virginica":3}
DecodedLabels={1:"Iris-setosa",2:"Iris-versicolor",3:"Iris-virginica"}
for i in range(len(y)):
  y[i]=EncodedLabels[y[i]]

"""#**Spliting the Dataset**"""

np.random.shuffle(dataset)
dataset
#concatenate the training set
x2=dataset[:,:-1]
y2=dataset[:,-1]




EncodedLabels={"Iris-setosa":1,"Iris-versicolor":2,"Iris-virginica":3}
DecodedLabels={1:"Iris-setosa",2:"Iris-versicolor",3:"Iris-virginica"}
for i in range(len(y2)):
  y2[i]=EncodedLabels[y2[i]]   
  



#===============================[first 5-fold sets]===================================
#xtrain
x_train1=x2[0:120,:]

#ytrain
y_train1=y2[0:120]

#concatenate the test set
#xtest
x_test1=x2[120:150,:]
#ytest
y_test1=y2[120:150]


#==============================[second 5-fold sets]===================================
#xtrain
x_train2=x2[30:150,:]

#ytrain
y_train2=y2[30:150]

#concatenate the test set
#xtest
x_test2=x2[0:30,:]
#ytest
y_test2=y2[0:30]


#==============================[third 5-fold sets]===================================
#xtrain
xt1=x2[0:30,:]
xt2=x2[60:150,:]
x_train3=np.concatenate((xt1,xt2))



#ytrain
yt1=y2[0:30]
yt2=y2[60:150]
y_train3=np.concatenate((yt1,yt2))


#concatenate the test set
#xtest
x_test3=x2[30:60,:]
#ytest
y_test3=y2[30:60]

#==============================[fourth 5-fold sets]===================================
#xtrain
xt1=x2[0:60,:]
xt2=x2[90:150,:]
x_train4=np.concatenate((xt1,xt2))



#ytrain
yt1=y2[0:60]
yt2=y2[90:150]
y_train4=np.concatenate((yt1,yt2))


#concatenate the test set
#xtest
x_test4=x2[60:90,:]
#ytest
y_test4=y2[60:90]

#==============================[fourth 5-fold sets]===================================
#xtrain
xt1=x2[0:90,:]
xt2=x2[120:150,:]
x_train5=np.concatenate((xt1,xt2))



#ytrain
yt1=y2[0:90]
yt2=y2[120:150]
y_train5=np.concatenate((yt1,yt2))


#concatenate the test set
#xtest
x_test5=x2[90:120,:]
#ytest
y_test5=y2[90:120]

#concatenate the training set
#xtrain
xt1=x[0:40,:]
xt2=x[50:90,:]
xt3=x[100:140,:]
x_train=np.concatenate((xt1,xt2,xt3))
#ytrain
yt1=y[0:40]
yt2=y[50:90]
yt3=y[100:140]
y_train=np.concatenate((yt1,yt2,yt3))

#concatenate the test set
#xtest
xr1=x[40:50,:]
xr2=x[90:100,:]
xr3=x[140:150,:]
x_test=np.concatenate((xr1,xr2,xr3))
#ytest
yr1=y[40:50]
yr2=y[90:100]
yr3=y[140:150]
y_test=np.concatenate((yr1,yr2,yr3))

def NearestNieghbour(xtrain,ytrain,xtest,distanceType):
  minDist=math.inf
  ind=-1
  for i in range(len(xtrain)):
    currentDist = calcDist(xtrain[i],xtest,distanceType)
    if currentDist < minDist:
      minDist = currentDist
      ind = i
  return ytrain[ind]

def NearestNieghbour2(xtrain,ytrain,xtest,k,distanceType):
  distances={}

  for i in range(len(xtrain)):
    currentDist = calcDist(xtrain[i],xtest,distanceType)
    distances[currentDist]=i
  sortedDist = sorted(distances)
  countsA=0
  countsB=0
  countsC=0
  
  for i in range(k):
    ind = distances[sortedDist[i]]
    if ytrain[ind] == 1:
      countsA +=1
    elif ytrain[ind] == 2:
      countsB +=1
    elif ytrain[ind] == 3:
      countsC +=1
  
  maxCounts = max(countsA,countsB,countsC)
  if maxCounts == countsA:
    return 1
  elif maxCounts == countsB:
    return 2
  elif maxCounts == countsC:
    return 3

def calcDist(x1,x2,distanceType):

  if (distanceType == 1):
    #L1(SAD): sum of absulte diffrences
    distance = sum(abs(np.subtract(x1,x2)))  


  else:
    #L2(SSD): sum of square diffrences
    distance = sum(np.square(np.subtract(x1,x2)))
  
    
  return distance

"""# **Prediction the test set result**"""

def calcAccuracy(y_predict,y_test):
  correctness = np.subtract(y_predict,y_test)
  correct=0
  for i in correctness:
    if i == 0:
      correct+=1

  accuracy=correct/len(ypredict)*100
  return accuracy

K=7
L=1
#==============================[first 5-fold sets]===================================
ypredict=[]
for i in range(len(x_test)):
  EncodedLabel = NearestNieghbour2(x_train1,y_train1,x_test1[i],K,L)
  ypredict.append(EncodedLabel)
acc1 = calcAccuracy(ypredict,y_test1)

#==============================[second 5-fold sets]===================================
ypredict=[]
for i in range(len(x_test)):
  EncodedLabel = NearestNieghbour2(x_train2,y_train2,x_test2[i],K,L)
  ypredict.append(EncodedLabel)
acc2 = calcAccuracy(ypredict,y_test2)

#==============================[third 5-fold sets]===================================
ypredict=[]
for i in range(len(x_test)):
  EncodedLabel = NearestNieghbour2(x_train3,y_train3,x_test3[i],K,L)
  ypredict.append(EncodedLabel)
acc3 = calcAccuracy(ypredict,y_test3)

#==============================[fourth 5-fold sets]===================================
ypredict=[]
for i in range(len(x_test)):
  EncodedLabel = NearestNieghbour2(x_train4,y_train4,x_test4[i],K,L)
  ypredict.append(EncodedLabel)
acc4 = calcAccuracy(ypredict,y_test4)

#==============================[fifth 5-fold sets]===================================
ypredict=[]
for i in range(len(x_test)):
  EncodedLabel = NearestNieghbour2(x_train5,y_train5,x_test5[i],K,L)
  ypredict.append(EncodedLabel)
acc5 = calcAccuracy(ypredict,y_test5)

acc = (acc1+acc2+acc3+acc4+acc5)/5
print(acc)

"""# **Creating the confusion matrix**

# **Generliaing for K more 1 or more**
"""

